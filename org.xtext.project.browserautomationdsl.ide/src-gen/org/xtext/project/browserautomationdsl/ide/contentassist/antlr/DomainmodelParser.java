/*
 * generated by Xtext 2.15.0
 */
package org.xtext.project.browserautomationdsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.project.browserautomationdsl.ide.contentassist.antlr.internal.InternalDomainmodelParser;
import org.xtext.project.browserautomationdsl.services.DomainmodelGrammarAccess;

public class DomainmodelParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DomainmodelGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DomainmodelGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getINSTRUCTIONAccess().getAlternatives(), "rule__INSTRUCTION__Alternatives");
			builder.put(grammarAccess.getOPENAccess().getAlternatives_1(), "rule__OPEN__Alternatives_1");
			builder.put(grammarAccess.getCLICKAccess().getAlternatives_2(), "rule__CLICK__Alternatives_2");
			builder.put(grammarAccess.getFILLAccess().getAlternatives_1(), "rule__FILL__Alternatives_1");
			builder.put(grammarAccess.getFILLAccess().getAlternatives_4(), "rule__FILL__Alternatives_4");
			builder.put(grammarAccess.getREADAccess().getAlternatives_4(), "rule__READ__Alternatives_4");
			builder.put(grammarAccess.getELEMENTIDENTIFIERAccess().getAlternatives_2(), "rule__ELEMENTIDENTIFIER__Alternatives_2");
			builder.put(grammarAccess.getELEMENTIDENTIFIERAccess().getAlternatives_3(), "rule__ELEMENTIDENTIFIER__Alternatives_3");
			builder.put(grammarAccess.getVERIFYAccess().getAlternatives_2(), "rule__VERIFY__Alternatives_2");
			builder.put(grammarAccess.getVERIFYAccess().getAlternatives_2_1_0(), "rule__VERIFY__Alternatives_2_1_0");
			builder.put(grammarAccess.getVERIFYAccess().getAlternatives_3(), "rule__VERIFY__Alternatives_3");
			builder.put(grammarAccess.getVERIFYAccess().getAlternatives_3_0_1(), "rule__VERIFY__Alternatives_3_0_1");
			builder.put(grammarAccess.getVERIFYAccess().getAlternatives_3_0_1_0_0(), "rule__VERIFY__Alternatives_3_0_1_0_0");
			builder.put(grammarAccess.getVERIFYAccess().getAlternatives_3_1_1(), "rule__VERIFY__Alternatives_3_1_1");
			builder.put(grammarAccess.getPROGRAMMEAccess().getGroup(), "rule__PROGRAMME__Group__0");
			builder.put(grammarAccess.getPROGRAMMEAccess().getGroup_2(), "rule__PROGRAMME__Group_2__0");
			builder.put(grammarAccess.getINSTRUCTIONAccess().getGroup_0(), "rule__INSTRUCTION__Group_0__0");
			builder.put(grammarAccess.getINSTRUCTIONAccess().getGroup_1(), "rule__INSTRUCTION__Group_1__0");
			builder.put(grammarAccess.getINSTRUCTIONAccess().getGroup_2(), "rule__INSTRUCTION__Group_2__0");
			builder.put(grammarAccess.getINSTRUCTIONAccess().getGroup_3(), "rule__INSTRUCTION__Group_3__0");
			builder.put(grammarAccess.getINSTRUCTIONAccess().getGroup_8(), "rule__INSTRUCTION__Group_8__0");
			builder.put(grammarAccess.getOPENAccess().getGroup(), "rule__OPEN__Group__0");
			builder.put(grammarAccess.getGOTOAccess().getGroup(), "rule__GOTO__Group__0");
			builder.put(grammarAccess.getCLICKAccess().getGroup(), "rule__CLICK__Group__0");
			builder.put(grammarAccess.getFILLAccess().getGroup(), "rule__FILL__Group__0");
			builder.put(grammarAccess.getFILLAccess().getGroup_4_0(), "rule__FILL__Group_4_0__0");
			builder.put(grammarAccess.getCHECKAccess().getGroup(), "rule__CHECK__Group__0");
			builder.put(grammarAccess.getUNCHECKAccess().getGroup(), "rule__UNCHECK__Group__0");
			builder.put(grammarAccess.getSELECTAccess().getGroup(), "rule__SELECT__Group__0");
			builder.put(grammarAccess.getREADAccess().getGroup(), "rule__READ__Group__0");
			builder.put(grammarAccess.getELEMENTIDENTIFIERAccess().getGroup(), "rule__ELEMENTIDENTIFIER__Group__0");
			builder.put(grammarAccess.getELEMENTIDENTIFIERAccess().getGroup_3_1(), "rule__ELEMENTIDENTIFIER__Group_3_1__0");
			builder.put(grammarAccess.getCOUNTAccess().getGroup(), "rule__COUNT__Group__0");
			builder.put(grammarAccess.getSAVEVARAccess().getGroup(), "rule__SAVEVAR__Group__0");
			builder.put(grammarAccess.getVERIFYAccess().getGroup(), "rule__VERIFY__Group__0");
			builder.put(grammarAccess.getVERIFYAccess().getGroup_2_1(), "rule__VERIFY__Group_2_1__0");
			builder.put(grammarAccess.getVERIFYAccess().getGroup_3_0(), "rule__VERIFY__Group_3_0__0");
			builder.put(grammarAccess.getVERIFYAccess().getGroup_3_0_1_0(), "rule__VERIFY__Group_3_0_1_0__0");
			builder.put(grammarAccess.getVERIFYAccess().getGroup_3_0_1_2(), "rule__VERIFY__Group_3_0_1_2__0");
			builder.put(grammarAccess.getVERIFYAccess().getGroup_3_1(), "rule__VERIFY__Group_3_1__0");
			builder.put(grammarAccess.getVERIFYAccess().getGroup_3_1_1_0(), "rule__VERIFY__Group_3_1_1_0__0");
			builder.put(grammarAccess.getPLAYAccess().getGroup(), "rule__PLAY__Group__0");
			builder.put(grammarAccess.getPROGRAMMEAccess().getNameAssignment_1(), "rule__PROGRAMME__NameAssignment_1");
			builder.put(grammarAccess.getPROGRAMMEAccess().getParamAssignment_2_1(), "rule__PROGRAMME__ParamAssignment_2_1");
			builder.put(grammarAccess.getPROGRAMMEAccess().getParamsAssignment_2_2(), "rule__PROGRAMME__ParamsAssignment_2_2");
			builder.put(grammarAccess.getPROGRAMMEAccess().getInstAssignment_3(), "rule__PROGRAMME__InstAssignment_3");
			builder.put(grammarAccess.getFILLAccess().getVarAssignment_4_0_1(), "rule__FILL__VarAssignment_4_0_1");
			builder.put(grammarAccess.getFILLAccess().getValueAssignment_4_1(), "rule__FILL__ValueAssignment_4_1");
			builder.put(grammarAccess.getSELECTAccess().getElemAssignment_1(), "rule__SELECT__ElemAssignment_1");
			builder.put(grammarAccess.getSAVEVARAccess().getVarAssignment_3(), "rule__SAVEVAR__VarAssignment_3");
			builder.put(grammarAccess.getVERIFYAccess().getValueAssignment_3_0_1_1(), "rule__VERIFY__ValueAssignment_3_0_1_1");
			builder.put(grammarAccess.getVERIFYAccess().getVarAssignment_3_0_1_2_1(), "rule__VERIFY__VarAssignment_3_0_1_2_1");
			builder.put(grammarAccess.getVERIFYAccess().getVarAssignment_3_1_1_0_1(), "rule__VERIFY__VarAssignment_3_1_1_0_1");
			builder.put(grammarAccess.getVERIFYAccess().getValueAssignment_3_1_1_1(), "rule__VERIFY__ValueAssignment_3_1_1_1");
			builder.put(grammarAccess.getPLAYAccess().getParamsAssignment_4(), "rule__PLAY__ParamsAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DomainmodelGrammarAccess grammarAccess;

	@Override
	protected InternalDomainmodelParser createParser() {
		InternalDomainmodelParser result = new InternalDomainmodelParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DomainmodelGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DomainmodelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
