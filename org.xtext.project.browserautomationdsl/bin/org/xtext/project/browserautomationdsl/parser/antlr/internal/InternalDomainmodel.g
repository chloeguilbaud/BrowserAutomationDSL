/*
 * generated by Xtext 2.15.0
 */
grammar InternalDomainmodel;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.project.browserautomationdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.project.browserautomationdsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.project.browserautomationdsl.services.DomainmodelGrammarAccess;

}

@parser::members {

 	private DomainmodelGrammarAccess grammarAccess;

    public InternalDomainmodelParser(TokenStream input, DomainmodelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "PROGRAMME";
   	}

   	@Override
   	protected DomainmodelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePROGRAMME
entryRulePROGRAMME returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPROGRAMMERule()); }
	iv_rulePROGRAMME=rulePROGRAMME
	{ $current=$iv_rulePROGRAMME.current; }
	EOF;

// Rule PROGRAMME
rulePROGRAMME returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='procedure'
		{
			newLeafNode(otherlv_0, grammarAccess.getPROGRAMMEAccess().getProcedureKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_VARTYPE
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPROGRAMMEAccess().getNameVARTYPETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPROGRAMMERule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.project.browserautomationdsl.Domainmodel.VARTYPE");
				}
			)
		)
		(
			otherlv_2='with'
			{
				newLeafNode(otherlv_2, grammarAccess.getPROGRAMMEAccess().getWithKeyword_2_0());
			}
			(
				(
					lv_param_3_0=RULE_VARTYPE
					{
						newLeafNode(lv_param_3_0, grammarAccess.getPROGRAMMEAccess().getParamVARTYPETerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPROGRAMMERule());
						}
						setWithLastConsumed(
							$current,
							"param",
							lv_param_3_0,
							"org.xtext.project.browserautomationdsl.Domainmodel.VARTYPE");
					}
				)
			)
			(
				(
					lv_params_4_0=RULE_VARTYPE
					{
						newLeafNode(lv_params_4_0, grammarAccess.getPROGRAMMEAccess().getParamsVARTYPETerminalRuleCall_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPROGRAMMERule());
						}
						addWithLastConsumed(
							$current,
							"params",
							lv_params_4_0,
							"org.xtext.project.browserautomationdsl.Domainmodel.VARTYPE");
					}
				)
			)*
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPROGRAMMEAccess().getInstINSTRUCTIONParserRuleCall_3_0());
				}
				lv_inst_5_0=ruleINSTRUCTION
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPROGRAMMERule());
					}
					add(
						$current,
						"inst",
						lv_inst_5_0,
						"org.xtext.project.browserautomationdsl.Domainmodel.INSTRUCTION");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)*
;

// Entry rule entryRuleINSTRUCTION
entryRuleINSTRUCTION returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getINSTRUCTIONRule()); }
	iv_ruleINSTRUCTION=ruleINSTRUCTION
	{ $current=$iv_ruleINSTRUCTION.current; }
	EOF;

// Rule INSTRUCTION
ruleINSTRUCTION returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getINSTRUCTIONAccess().getINSTRUCTIONAction_0_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getOPENParserRuleCall_0_1());
			}
			ruleOPEN
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getINSTRUCTIONAccess().getINSTRUCTIONAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getCLICKParserRuleCall_1_1());
			}
			ruleCLICK
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getINSTRUCTIONAccess().getINSTRUCTIONAction_2_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getCHECKParserRuleCall_2_1());
			}
			ruleCHECK
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getINSTRUCTIONAccess().getINSTRUCTIONAction_3_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getUNCHECKParserRuleCall_3_1());
			}
			ruleUNCHECK
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getREADParserRuleCall_4());
		}
		this_READ_8=ruleREAD
		{
			$current = $this_READ_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getCOUNTParserRuleCall_5());
		}
		this_COUNT_9=ruleCOUNT
		{
			$current = $this_COUNT_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getVERIFYParserRuleCall_6());
		}
		this_VERIFY_10=ruleVERIFY
		{
			$current = $this_VERIFY_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getSELECTParserRuleCall_7());
		}
		this_SELECT_11=ruleSELECT
		{
			$current = $this_SELECT_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getINSTRUCTIONAccess().getINSTRUCTIONAction_8_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getGOTOParserRuleCall_8_1());
			}
			ruleGOTO
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getFILLParserRuleCall_9());
		}
		this_FILL_14=ruleFILL
		{
			$current = $this_FILL_14.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getINSTRUCTIONAccess().getPLAYParserRuleCall_10());
		}
		this_PLAY_15=rulePLAY
		{
			$current = $this_PLAY_15.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOPEN
entryRuleOPEN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOPENRule()); }
	iv_ruleOPEN=ruleOPEN
	{ $current=$iv_ruleOPEN.current.getText(); }
	EOF;

// Rule OPEN
ruleOPEN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='open'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPENAccess().getOpenKeyword_0());
		}
		(
			kw='FIREFOX'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOPENAccess().getFIREFOXKeyword_1_0());
			}
			    |
			kw='CHROME'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOPENAccess().getCHROMEKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleGOTO
entryRuleGOTO returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGOTORule()); }
	iv_ruleGOTO=ruleGOTO
	{ $current=$iv_ruleGOTO.current.getText(); }
	EOF;

// Rule GOTO
ruleGOTO returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='go to'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getGOTOAccess().getGoToKeyword_0());
		}
		(
			kw='given'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getGOTOAccess().getGivenKeyword_1());
			}
		)?
		this_STRING_2=RULE_STRING
		{
			$current.merge(this_STRING_2);
		}
		{
			newLeafNode(this_STRING_2, grammarAccess.getGOTOAccess().getSTRINGTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleCLICK
entryRuleCLICK returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCLICKRule()); }
	iv_ruleCLICK=ruleCLICK
	{ $current=$iv_ruleCLICK.current.getText(); }
	EOF;

// Rule CLICK
ruleCLICK returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='click'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCLICKAccess().getClickKeyword_0());
		}
		kw='on'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCLICKAccess().getOnKeyword_1());
		}
		(
			kw='BUTTON'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCLICKAccess().getBUTTONKeyword_2_0());
			}
			    |
			kw='LINK'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCLICKAccess().getLINKKeyword_2_1());
			}
			    |
			kw='IMAGE'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCLICKAccess().getIMAGEKeyword_2_2());
			}
			    |
			kw='TEXT'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCLICKAccess().getTEXTKeyword_2_3());
			}
		)
		{
			newCompositeNode(grammarAccess.getCLICKAccess().getELEMENTIDENTIFIERParserRuleCall_3());
		}
		this_ELEMENTIDENTIFIER_6=ruleELEMENTIDENTIFIER
		{
			$current.merge(this_ELEMENTIDENTIFIER_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFILL
entryRuleFILL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFILLRule()); }
	iv_ruleFILL=ruleFILL
	{ $current=$iv_ruleFILL.current; }
	EOF;

// Rule FILL
ruleFILL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='fill'
		{
			newLeafNode(otherlv_0, grammarAccess.getFILLAccess().getFillKeyword_0());
		}
		(
			otherlv_1='TEXTFIELD'
			{
				newLeafNode(otherlv_1, grammarAccess.getFILLAccess().getTEXTFIELDKeyword_1_0());
			}
			    |
			otherlv_2='SEARCHFIELD'
			{
				newLeafNode(otherlv_2, grammarAccess.getFILLAccess().getSEARCHFIELDKeyword_1_1());
			}
		)
		(
			{
				newCompositeNode(grammarAccess.getFILLAccess().getELEMENTIDENTIFIERParserRuleCall_2());
			}
			ruleELEMENTIDENTIFIER
			{
				afterParserOrEnumRuleCall();
			}
		)?
		otherlv_4='with'
		{
			newLeafNode(otherlv_4, grammarAccess.getFILLAccess().getWithKeyword_3());
		}
		(
			(
				otherlv_5='saved'
				{
					newLeafNode(otherlv_5, grammarAccess.getFILLAccess().getSavedKeyword_4_0_0());
				}
				(
					(
						lv_var_6_0=RULE_VARTYPE
						{
							newLeafNode(lv_var_6_0, grammarAccess.getFILLAccess().getVarVARTYPETerminalRuleCall_4_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFILLRule());
							}
							setWithLastConsumed(
								$current,
								"var",
								lv_var_6_0,
								"org.xtext.project.browserautomationdsl.Domainmodel.VARTYPE");
						}
					)
				)
			)
			    |
			(
				(
					lv_value_7_0=RULE_STRING
					{
						newLeafNode(lv_value_7_0, grammarAccess.getFILLAccess().getValueSTRINGTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFILLRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_7_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleCHECK
entryRuleCHECK returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCHECKRule()); }
	iv_ruleCHECK=ruleCHECK
	{ $current=$iv_ruleCHECK.current.getText(); }
	EOF;

// Rule CHECK
ruleCHECK returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='check'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCHECKAccess().getCheckKeyword_0());
		}
		(
			kw='all'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCHECKAccess().getAllKeyword_1());
			}
		)?
		kw='CHECKBOX'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCHECKAccess().getCHECKBOXKeyword_2());
		}
		(
			{
				newCompositeNode(grammarAccess.getCHECKAccess().getELEMENTIDENTIFIERParserRuleCall_3());
			}
			this_ELEMENTIDENTIFIER_3=ruleELEMENTIDENTIFIER
			{
				$current.merge(this_ELEMENTIDENTIFIER_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleUNCHECK
entryRuleUNCHECK returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUNCHECKRule()); }
	iv_ruleUNCHECK=ruleUNCHECK
	{ $current=$iv_ruleUNCHECK.current.getText(); }
	EOF;

// Rule UNCHECK
ruleUNCHECK returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='uncheck'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUNCHECKAccess().getUncheckKeyword_0());
		}
		(
			kw='all'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getUNCHECKAccess().getAllKeyword_1());
			}
		)?
		kw='CHECKBOX'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUNCHECKAccess().getCHECKBOXKeyword_2());
		}
		(
			{
				newCompositeNode(grammarAccess.getUNCHECKAccess().getELEMENTIDENTIFIERParserRuleCall_3());
			}
			this_ELEMENTIDENTIFIER_3=ruleELEMENTIDENTIFIER
			{
				$current.merge(this_ELEMENTIDENTIFIER_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleSELECT
entryRuleSELECT returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSELECTRule()); }
	iv_ruleSELECT=ruleSELECT
	{ $current=$iv_ruleSELECT.current; }
	EOF;

// Rule SELECT
ruleSELECT returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='select'
		{
			newLeafNode(otherlv_0, grammarAccess.getSELECTAccess().getSelectKeyword_0());
		}
		(
			(
				lv_elem_1_0=RULE_STRING
				{
					newLeafNode(lv_elem_1_0, grammarAccess.getSELECTAccess().getElemSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSELECTRule());
					}
					setWithLastConsumed(
						$current,
						"elem",
						lv_elem_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='in'
		{
			newLeafNode(otherlv_2, grammarAccess.getSELECTAccess().getInKeyword_2());
		}
		otherlv_3='COMBOBOX'
		{
			newLeafNode(otherlv_3, grammarAccess.getSELECTAccess().getCOMBOBOXKeyword_3());
		}
		(
			{
				newCompositeNode(grammarAccess.getSELECTAccess().getELEMENTIDENTIFIERParserRuleCall_4());
			}
			ruleELEMENTIDENTIFIER
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleREAD
entryRuleREAD returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getREADRule()); }
	iv_ruleREAD=ruleREAD
	{ $current=$iv_ruleREAD.current; }
	EOF;

// Rule READ
ruleREAD returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getREADAccess().getREADAction_0(),
					$current);
			}
		)
		otherlv_1='read'
		{
			newLeafNode(otherlv_1, grammarAccess.getREADAccess().getReadKeyword_1());
		}
		otherlv_2='url'
		{
			newLeafNode(otherlv_2, grammarAccess.getREADAccess().getUrlKeyword_2());
		}
		otherlv_3='from'
		{
			newLeafNode(otherlv_3, grammarAccess.getREADAccess().getFromKeyword_3());
		}
		(
			otherlv_4='BUTTON'
			{
				newLeafNode(otherlv_4, grammarAccess.getREADAccess().getBUTTONKeyword_4_0());
			}
			    |
			otherlv_5='LINK'
			{
				newLeafNode(otherlv_5, grammarAccess.getREADAccess().getLINKKeyword_4_1());
			}
			    |
			otherlv_6='IMAGE'
			{
				newLeafNode(otherlv_6, grammarAccess.getREADAccess().getIMAGEKeyword_4_2());
			}
			    |
			otherlv_7='TEXT'
			{
				newLeafNode(otherlv_7, grammarAccess.getREADAccess().getTEXTKeyword_4_3());
			}
		)
		{
			newCompositeNode(grammarAccess.getREADAccess().getELEMENTIDENTIFIERParserRuleCall_5());
		}
		ruleELEMENTIDENTIFIER
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getREADAccess().getSAVEVARParserRuleCall_6());
			}
			this_SAVEVAR_9=ruleSAVEVAR
			{
				$current = $this_SAVEVAR_9.current;
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleELEMENTIDENTIFIER
entryRuleELEMENTIDENTIFIER returns [String current=null]:
	{ newCompositeNode(grammarAccess.getELEMENTIDENTIFIERRule()); }
	iv_ruleELEMENTIDENTIFIER=ruleELEMENTIDENTIFIER
	{ $current=$iv_ruleELEMENTIDENTIFIER.current.getText(); }
	EOF;

// Rule ELEMENTIDENTIFIER
ruleELEMENTIDENTIFIER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='identified'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getELEMENTIDENTIFIERAccess().getIdentifiedKeyword_0());
		}
		kw='by'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getELEMENTIDENTIFIERAccess().getByKeyword_1());
		}
		(
			kw='LABEL'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getELEMENTIDENTIFIERAccess().getLABELKeyword_2_0());
			}
			    |
			kw='CLASS'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getELEMENTIDENTIFIERAccess().getCLASSKeyword_2_1());
			}
			    |
			kw='ID'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getELEMENTIDENTIFIERAccess().getIDKeyword_2_2());
			}
			    |
			kw='ALT'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getELEMENTIDENTIFIERAccess().getALTKeyword_2_3());
			}
		)
		(
			this_STRING_6=RULE_STRING
			{
				$current.merge(this_STRING_6);
			}
			{
				newLeafNode(this_STRING_6, grammarAccess.getELEMENTIDENTIFIERAccess().getSTRINGTerminalRuleCall_3_0());
			}
			    |
			(
				kw='given'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getELEMENTIDENTIFIERAccess().getGivenKeyword_3_1_0());
				}
				this_VARTYPE_8=RULE_VARTYPE
				{
					$current.merge(this_VARTYPE_8);
				}
				{
					newLeafNode(this_VARTYPE_8, grammarAccess.getELEMENTIDENTIFIERAccess().getVARTYPETerminalRuleCall_3_1_1());
				}
			)
		)
	)
;

// Entry rule entryRuleCOUNT
entryRuleCOUNT returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCOUNTRule()); }
	iv_ruleCOUNT=ruleCOUNT
	{ $current=$iv_ruleCOUNT.current; }
	EOF;

// Rule COUNT
ruleCOUNT returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCOUNTAccess().getCOUNTAction_0(),
					$current);
			}
		)
		otherlv_1='count'
		{
			newLeafNode(otherlv_1, grammarAccess.getCOUNTAccess().getCountKeyword_1());
		}
		otherlv_2='ELEMENT'
		{
			newLeafNode(otherlv_2, grammarAccess.getCOUNTAccess().getELEMENTKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getCOUNTAccess().getELEMENTIDENTIFIERParserRuleCall_3());
		}
		ruleELEMENTIDENTIFIER
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getCOUNTAccess().getSAVEVARParserRuleCall_4());
			}
			this_SAVEVAR_4=ruleSAVEVAR
			{
				$current = $this_SAVEVAR_4.current;
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleSAVEVAR
entryRuleSAVEVAR returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSAVEVARRule()); }
	iv_ruleSAVEVAR=ruleSAVEVAR
	{ $current=$iv_ruleSAVEVAR.current; }
	EOF;

// Rule SAVEVAR
ruleSAVEVAR returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='and'
		{
			newLeafNode(otherlv_0, grammarAccess.getSAVEVARAccess().getAndKeyword_0());
		}
		otherlv_1='save'
		{
			newLeafNode(otherlv_1, grammarAccess.getSAVEVARAccess().getSaveKeyword_1());
		}
		otherlv_2='in'
		{
			newLeafNode(otherlv_2, grammarAccess.getSAVEVARAccess().getInKeyword_2());
		}
		(
			(
				lv_var_3_0=RULE_VARTYPE
				{
					newLeafNode(lv_var_3_0, grammarAccess.getSAVEVARAccess().getVarVARTYPETerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSAVEVARRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_3_0,
						"org.xtext.project.browserautomationdsl.Domainmodel.VARTYPE");
				}
			)
		)
	)
;

// Entry rule entryRuleVERIFY
entryRuleVERIFY returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVERIFYRule()); }
	iv_ruleVERIFY=ruleVERIFY
	{ $current=$iv_ruleVERIFY.current; }
	EOF;

// Rule VERIFY
ruleVERIFY returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='verify'
		{
			newLeafNode(otherlv_0, grammarAccess.getVERIFYAccess().getVerifyKeyword_0());
		}
		otherlv_1='that'
		{
			newLeafNode(otherlv_1, grammarAccess.getVERIFYAccess().getThatKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getVERIFYAccess().getCOUNTParserRuleCall_2_0());
			}
			this_COUNT_2=ruleCOUNT
			{
				$current = $this_COUNT_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			(
				(
					otherlv_3='PAGE'
					{
						newLeafNode(otherlv_3, grammarAccess.getVERIFYAccess().getPAGEKeyword_2_1_0_0());
					}
					    |
					otherlv_4='TEXT'
					{
						newLeafNode(otherlv_4, grammarAccess.getVERIFYAccess().getTEXTKeyword_2_1_0_1());
					}
				)
				(
					{
						newCompositeNode(grammarAccess.getVERIFYAccess().getELEMENTIDENTIFIERParserRuleCall_2_1_1());
					}
					ruleELEMENTIDENTIFIER
					{
						afterParserOrEnumRuleCall();
					}
				)?
			)
		)
		(
			(
				otherlv_6='contains'
				{
					newLeafNode(otherlv_6, grammarAccess.getVERIFYAccess().getContainsKeyword_3_0_0());
				}
				(
					(
						(
							otherlv_7='LINK'
							{
								newLeafNode(otherlv_7, grammarAccess.getVERIFYAccess().getLINKKeyword_3_0_1_0_0_0());
							}
							    |
							otherlv_8='IMAGE'
							{
								newLeafNode(otherlv_8, grammarAccess.getVERIFYAccess().getIMAGEKeyword_3_0_1_0_0_1());
							}
						)
						{
							newCompositeNode(grammarAccess.getVERIFYAccess().getELEMENTIDENTIFIERParserRuleCall_3_0_1_0_1());
						}
						ruleELEMENTIDENTIFIER
						{
							afterParserOrEnumRuleCall();
						}
					)
					    |
					(
						(
							lv_value_10_0=RULE_STRING
							{
								newLeafNode(lv_value_10_0, grammarAccess.getVERIFYAccess().getValueSTRINGTerminalRuleCall_3_0_1_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVERIFYRule());
								}
								setWithLastConsumed(
									$current,
									"value",
									lv_value_10_0,
									"org.eclipse.xtext.common.Terminals.STRING");
							}
						)
					)
					    |
					(
						otherlv_11='saved'
						{
							newLeafNode(otherlv_11, grammarAccess.getVERIFYAccess().getSavedKeyword_3_0_1_2_0());
						}
						(
							(
								lv_var_12_0=RULE_VARTYPE
								{
									newLeafNode(lv_var_12_0, grammarAccess.getVERIFYAccess().getVarVARTYPETerminalRuleCall_3_0_1_2_1_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getVERIFYRule());
									}
									setWithLastConsumed(
										$current,
										"var",
										lv_var_12_0,
										"org.xtext.project.browserautomationdsl.Domainmodel.VARTYPE");
								}
							)
						)
					)
				)
			)
			    |
			(
				otherlv_13='equals'
				{
					newLeafNode(otherlv_13, grammarAccess.getVERIFYAccess().getEqualsKeyword_3_1_0());
				}
				(
					(
						otherlv_14='saved'
						{
							newLeafNode(otherlv_14, grammarAccess.getVERIFYAccess().getSavedKeyword_3_1_1_0_0());
						}
						(
							(
								lv_var_15_0=RULE_VARTYPE
								{
									newLeafNode(lv_var_15_0, grammarAccess.getVERIFYAccess().getVarVARTYPETerminalRuleCall_3_1_1_0_1_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getVERIFYRule());
									}
									setWithLastConsumed(
										$current,
										"var",
										lv_var_15_0,
										"org.xtext.project.browserautomationdsl.Domainmodel.VARTYPE");
								}
							)
						)
					)
					    |
					(
						(
							lv_value_16_0=RULE_STRING
							{
								newLeafNode(lv_value_16_0, grammarAccess.getVERIFYAccess().getValueSTRINGTerminalRuleCall_3_1_1_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVERIFYRule());
								}
								setWithLastConsumed(
									$current,
									"value",
									lv_value_16_0,
									"org.eclipse.xtext.common.Terminals.STRING");
							}
						)
					)
				)
			)
		)
	)
;

// Entry rule entryRulePLAY
entryRulePLAY returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPLAYRule()); }
	iv_rulePLAY=rulePLAY
	{ $current=$iv_rulePLAY.current; }
	EOF;

// Rule PLAY
rulePLAY returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPLAYAccess().getPLAYAction_0(),
					$current);
			}
		)
		otherlv_1='play'
		{
			newLeafNode(otherlv_1, grammarAccess.getPLAYAccess().getPlayKeyword_1());
		}
		otherlv_2='procedure'
		{
			newLeafNode(otherlv_2, grammarAccess.getPLAYAccess().getProcedureKeyword_2());
		}
		this_VARTYPE_3=RULE_VARTYPE
		{
			newLeafNode(this_VARTYPE_3, grammarAccess.getPLAYAccess().getVARTYPETerminalRuleCall_3());
		}
		(
			(
				lv_params_4_0=RULE_STRING
				{
					newLeafNode(lv_params_4_0, grammarAccess.getPLAYAccess().getParamsSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPLAYRule());
					}
					addWithLastConsumed(
						$current,
						"params",
						lv_params_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)*
	)
;

RULE_VARTYPE : ('A'..'Z'|'a'..'z'|RULE_INT|'_'|'-')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
