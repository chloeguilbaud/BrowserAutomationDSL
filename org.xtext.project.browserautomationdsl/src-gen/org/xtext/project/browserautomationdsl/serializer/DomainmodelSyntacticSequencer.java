/*
 * generated by Xtext 2.15.0
 */
package org.xtext.project.browserautomationdsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.project.browserautomationdsl.services.DomainmodelGrammarAccess;

@SuppressWarnings("all")
public class DomainmodelSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DomainmodelGrammarAccess grammarAccess;
	protected AbstractElementAlias match_GOTO_GivenKeyword_1_q;
	protected AbstractElementAlias match_READ_BUTTONKeyword_3_0_or_IMAGEKeyword_3_2_or_LINKKeyword_3_1_or_TEXTKeyword_3_3;
	protected AbstractElementAlias match_VERIFY_CONTAINS_IMAGEKeyword_5_0_0_1_or_LINKKeyword_5_0_0_0;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DomainmodelGrammarAccess) access;
		match_GOTO_GivenKeyword_1_q = new TokenAlias(false, true, grammarAccess.getGOTOAccess().getGivenKeyword_1());
		match_READ_BUTTONKeyword_3_0_or_IMAGEKeyword_3_2_or_LINKKeyword_3_1_or_TEXTKeyword_3_3 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getREADAccess().getBUTTONKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getREADAccess().getIMAGEKeyword_3_2()), new TokenAlias(false, false, grammarAccess.getREADAccess().getLINKKeyword_3_1()), new TokenAlias(false, false, grammarAccess.getREADAccess().getTEXTKeyword_3_3()));
		match_VERIFY_CONTAINS_IMAGEKeyword_5_0_0_1_or_LINKKeyword_5_0_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getVERIFY_CONTAINSAccess().getIMAGEKeyword_5_0_0_1()), new TokenAlias(false, false, grammarAccess.getVERIFY_CONTAINSAccess().getLINKKeyword_5_0_0_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_GOTO_GivenKeyword_1_q.equals(syntax))
				emit_GOTO_GivenKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_READ_BUTTONKeyword_3_0_or_IMAGEKeyword_3_2_or_LINKKeyword_3_1_or_TEXTKeyword_3_3.equals(syntax))
				emit_READ_BUTTONKeyword_3_0_or_IMAGEKeyword_3_2_or_LINKKeyword_3_1_or_TEXTKeyword_3_3(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VERIFY_CONTAINS_IMAGEKeyword_5_0_0_1_or_LINKKeyword_5_0_0_0.equals(syntax))
				emit_VERIFY_CONTAINS_IMAGEKeyword_5_0_0_1_or_LINKKeyword_5_0_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'given'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name='go to' (ambiguity) value=STRING
	 */
	protected void emit_GOTO_GivenKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'BUTTON' | 'LINK' | 'IMAGE' | 'TEXT'
	 *
	 * This ambiguous syntax occurs at:
	 *     name='read' 'url' 'from' (ambiguity) identifier=ELEMENTIDENTIFIER
	 */
	protected void emit_READ_BUTTONKeyword_3_0_or_IMAGEKeyword_3_2_or_LINKKeyword_3_1_or_TEXTKeyword_3_3(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'LINK' | 'IMAGE'
	 *
	 * This ambiguous syntax occurs at:
	 *     identifier=ELEMENTIDENTIFIER 'contains' (ambiguity) containedIdentifier=ELEMENTIDENTIFIER
	 *     type='PAGE' 'contains' (ambiguity) containedIdentifier=ELEMENTIDENTIFIER
	 *     type='TEXT' 'contains' (ambiguity) containedIdentifier=ELEMENTIDENTIFIER
	 */
	protected void emit_VERIFY_CONTAINS_IMAGEKeyword_5_0_0_1_or_LINKKeyword_5_0_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
