/*
 * generated by Xtext 2.15.0
 */
package org.xtext.project.browserautomationdsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.project.browserautomationdsl.services.DomainmodelGrammarAccess;

@SuppressWarnings("all")
public class DomainmodelSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DomainmodelGrammarAccess grammarAccess;
	protected AbstractElementAlias match_FILL_ELEMENTIDENTIFIERParserRuleCall_2_q;
	protected AbstractElementAlias match_FILL_SEARCHFIELDKeyword_1_1_or_TEXTFIELDKeyword_1_0;
	protected AbstractElementAlias match_INSTRUCTION_CHECKParserRuleCall_2_1_or_CLICKParserRuleCall_1_1_or_OPENParserRuleCall_0_1_or_UNCHECKParserRuleCall_3_1;
	protected AbstractElementAlias match_READ_BUTTONKeyword_4_0_or_IMAGEKeyword_4_2_or_LINKKeyword_4_1_or_TEXTKeyword_4_3;
	protected AbstractElementAlias match_SELECT_ELEMENTIDENTIFIERParserRuleCall_6_q;
	protected AbstractElementAlias match_VERIFY_ELEMENTIDENTIFIERParserRuleCall_2_1_1_q;
	protected AbstractElementAlias match_VERIFY_PAGEKeyword_2_1_0_0_or_TEXTKeyword_2_1_0_1;
	protected AbstractElementAlias match_VERIFY___VerifyKeyword_0_ThatKeyword_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DomainmodelGrammarAccess) access;
		match_FILL_ELEMENTIDENTIFIERParserRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getFILLAccess().getELEMENTIDENTIFIERParserRuleCall_2());
		match_FILL_SEARCHFIELDKeyword_1_1_or_TEXTFIELDKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getFILLAccess().getSEARCHFIELDKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getFILLAccess().getTEXTFIELDKeyword_1_0()));
		match_INSTRUCTION_CHECKParserRuleCall_2_1_or_CLICKParserRuleCall_1_1_or_OPENParserRuleCall_0_1_or_UNCHECKParserRuleCall_3_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getINSTRUCTIONAccess().getCHECKParserRuleCall_2_1()), new TokenAlias(false, false, grammarAccess.getINSTRUCTIONAccess().getCLICKParserRuleCall_1_1()), new TokenAlias(false, false, grammarAccess.getINSTRUCTIONAccess().getOPENParserRuleCall_0_1()), new TokenAlias(false, false, grammarAccess.getINSTRUCTIONAccess().getUNCHECKParserRuleCall_3_1()));
		match_READ_BUTTONKeyword_4_0_or_IMAGEKeyword_4_2_or_LINKKeyword_4_1_or_TEXTKeyword_4_3 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getREADAccess().getBUTTONKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getREADAccess().getIMAGEKeyword_4_2()), new TokenAlias(false, false, grammarAccess.getREADAccess().getLINKKeyword_4_1()), new TokenAlias(false, false, grammarAccess.getREADAccess().getTEXTKeyword_4_3()));
		match_SELECT_ELEMENTIDENTIFIERParserRuleCall_6_q = new TokenAlias(false, true, grammarAccess.getSELECTAccess().getELEMENTIDENTIFIERParserRuleCall_6());
		match_VERIFY_ELEMENTIDENTIFIERParserRuleCall_2_1_1_q = new TokenAlias(false, true, grammarAccess.getVERIFYAccess().getELEMENTIDENTIFIERParserRuleCall_2_1_1());
		match_VERIFY_PAGEKeyword_2_1_0_0_or_TEXTKeyword_2_1_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getVERIFYAccess().getPAGEKeyword_2_1_0_0()), new TokenAlias(false, false, grammarAccess.getVERIFYAccess().getTEXTKeyword_2_1_0_1()));
		match_VERIFY___VerifyKeyword_0_ThatKeyword_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getVERIFYAccess().getVerifyKeyword_0()), new TokenAlias(false, false, grammarAccess.getVERIFYAccess().getThatKeyword_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCHECKRule())
			return getCHECKToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCLICKRule())
			return getCLICKToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getELEMENTIDENTIFIERRule())
			return getELEMENTIDENTIFIERToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOPENRule())
			return getOPENToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getUNCHECKRule())
			return getUNCHECKToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getVARTYPERule())
			return getVARTYPEToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * CHECK: 
	 * 	'check' ('all')? 'CHECKBOX' (ELEMENTIDENTIFIER)? 
	 * ;
	 */
	protected String getCHECKToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "checkCHECKBOX";
	}
	
	/**
	 * CLICK: 
	 * 	'click' 'on' ('BUTTON' | 'LINK' | 'IMAGE' | 'TEXT') ELEMENTIDENTIFIER
	 * ;
	 */
	protected String getCLICKToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "clickonBUTTONidentifiedbyLABEL\"\"\"\"";
	}
	
	/**
	 * ELEMENTIDENTIFIER: 
	 * 	'identified' 'by' ('LABEL' | 'CLASS' | 'ID' | 'ALT') '"' STRING '"'
	 * ;
	 */
	protected String getELEMENTIDENTIFIERToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "identifiedbyLABEL\"\"\"\"";
	}
	
	/**
	 * OPEN: 
	 * 	'open' ('FIREFOX' | 'CHROME')
	 * ;
	 */
	protected String getOPENToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "openFIREFOX";
	}
	
	/**
	 * UNCHECK: 
	 * 	'uncheck' ('all')? 'CHECKBOX' (ELEMENTIDENTIFIER)?
	 * ;
	 */
	protected String getUNCHECKToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "uncheckCHECKBOX";
	}
	
	/**
	 * terminal VARTYPE: 
	 * 	(('A'..'Z')|('a'..'z')|INT|'_'|'-')*
	 * ;
	 */
	protected String getVARTYPEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_FILL_ELEMENTIDENTIFIERParserRuleCall_2_q.equals(syntax))
				emit_FILL_ELEMENTIDENTIFIERParserRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FILL_SEARCHFIELDKeyword_1_1_or_TEXTFIELDKeyword_1_0.equals(syntax))
				emit_FILL_SEARCHFIELDKeyword_1_1_or_TEXTFIELDKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_INSTRUCTION_CHECKParserRuleCall_2_1_or_CLICKParserRuleCall_1_1_or_OPENParserRuleCall_0_1_or_UNCHECKParserRuleCall_3_1.equals(syntax))
				emit_INSTRUCTION_CHECKParserRuleCall_2_1_or_CLICKParserRuleCall_1_1_or_OPENParserRuleCall_0_1_or_UNCHECKParserRuleCall_3_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_READ_BUTTONKeyword_4_0_or_IMAGEKeyword_4_2_or_LINKKeyword_4_1_or_TEXTKeyword_4_3.equals(syntax))
				emit_READ_BUTTONKeyword_4_0_or_IMAGEKeyword_4_2_or_LINKKeyword_4_1_or_TEXTKeyword_4_3(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SELECT_ELEMENTIDENTIFIERParserRuleCall_6_q.equals(syntax))
				emit_SELECT_ELEMENTIDENTIFIERParserRuleCall_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VERIFY_ELEMENTIDENTIFIERParserRuleCall_2_1_1_q.equals(syntax))
				emit_VERIFY_ELEMENTIDENTIFIERParserRuleCall_2_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VERIFY_PAGEKeyword_2_1_0_0_or_TEXTKeyword_2_1_0_1.equals(syntax))
				emit_VERIFY_PAGEKeyword_2_1_0_0_or_TEXTKeyword_2_1_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VERIFY___VerifyKeyword_0_ThatKeyword_1__q.equals(syntax))
				emit_VERIFY___VerifyKeyword_0_ThatKeyword_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ELEMENTIDENTIFIER?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'fill' ('TEXTFIELD' | 'SEARCHFIELD') (ambiguity) 'with' '"' value=STRING
	 *     (rule start) 'fill' ('TEXTFIELD' | 'SEARCHFIELD') (ambiguity) 'with' 'saved' var=VARTYPE
	 */
	protected void emit_FILL_ELEMENTIDENTIFIERParserRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'TEXTFIELD' | 'SEARCHFIELD'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'fill' (ambiguity) ELEMENTIDENTIFIER? 'with' '"' value=STRING
	 *     (rule start) 'fill' (ambiguity) ELEMENTIDENTIFIER? 'with' 'saved' var=VARTYPE
	 */
	protected void emit_FILL_SEARCHFIELDKeyword_1_1_or_TEXTFIELDKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     OPEN | CLICK | CHECK | UNCHECK
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_INSTRUCTION_CHECKParserRuleCall_2_1_or_CLICKParserRuleCall_1_1_or_OPENParserRuleCall_0_1_or_UNCHECKParserRuleCall_3_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'BUTTON' | 'LINK' | 'IMAGE' | 'TEXT'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'read' 'url' 'from' (ambiguity) ELEMENTIDENTIFIER 'and' 'save' 'in' var=VARTYPE
	 *     (rule start) 'read' 'url' 'from' (ambiguity) ELEMENTIDENTIFIER (rule start)
	 */
	protected void emit_READ_BUTTONKeyword_4_0_or_IMAGEKeyword_4_2_or_LINKKeyword_4_1_or_TEXTKeyword_4_3(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ELEMENTIDENTIFIER?
	 *
	 * This ambiguous syntax occurs at:
	 *     elem=STRING '"' 'in' 'COMBOBOX' (ambiguity) (rule end)
	 */
	protected void emit_SELECT_ELEMENTIDENTIFIERParserRuleCall_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ELEMENTIDENTIFIER?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'verify' 'that' ('PAGE' | 'TEXT') (ambiguity) 'contains' '"' value=STRING
	 *     (rule start) 'verify' 'that' ('PAGE' | 'TEXT') (ambiguity) 'contains' 'LINK' ELEMENTIDENTIFIER (rule start)
	 */
	protected void emit_VERIFY_ELEMENTIDENTIFIERParserRuleCall_2_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'PAGE' | 'TEXT'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'verify' 'that' (ambiguity) ELEMENTIDENTIFIER? 'contains' '"' value=STRING
	 *     (rule start) 'verify' 'that' (ambiguity) ELEMENTIDENTIFIER? 'contains' 'LINK' ELEMENTIDENTIFIER (rule start)
	 */
	protected void emit_VERIFY_PAGEKeyword_2_1_0_0_or_TEXTKeyword_2_1_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('verify' 'that')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'count' 'ELEMENT' ELEMENTIDENTIFIER 'and' 'save' 'in' var=VARTYPE
	 *     (rule start) (ambiguity) 'count' 'ELEMENT' ELEMENTIDENTIFIER 'contains' '"' value=STRING
	 *     (rule start) (ambiguity) 'count' 'ELEMENT' ELEMENTIDENTIFIER (rule start)
	 */
	protected void emit_VERIFY___VerifyKeyword_0_ThatKeyword_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
