/*
 * generated by Xtext 2.15.0
 */
package org.xtext.project.browserautomationdsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.project.browserautomationdsl.domainmodel.CHECK;
import org.xtext.project.browserautomationdsl.domainmodel.CLICK;
import org.xtext.project.browserautomationdsl.domainmodel.COUNT;
import org.xtext.project.browserautomationdsl.domainmodel.DomainmodelPackage;
import org.xtext.project.browserautomationdsl.domainmodel.FILL;
import org.xtext.project.browserautomationdsl.domainmodel.GOTO;
import org.xtext.project.browserautomationdsl.domainmodel.OPEN;
import org.xtext.project.browserautomationdsl.domainmodel.PLAY;
import org.xtext.project.browserautomationdsl.domainmodel.PROCEDURE;
import org.xtext.project.browserautomationdsl.domainmodel.PROGRAMME;
import org.xtext.project.browserautomationdsl.domainmodel.READ;
import org.xtext.project.browserautomationdsl.domainmodel.SAVEVAR;
import org.xtext.project.browserautomationdsl.domainmodel.SELECT;
import org.xtext.project.browserautomationdsl.domainmodel.UNCHECK;
import org.xtext.project.browserautomationdsl.domainmodel.VERIFY;
import org.xtext.project.browserautomationdsl.services.DomainmodelGrammarAccess;

@SuppressWarnings("all")
public class DomainmodelSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DomainmodelGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DomainmodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DomainmodelPackage.CHECK:
				sequence_CHECK(context, (CHECK) semanticObject); 
				return; 
			case DomainmodelPackage.CLICK:
				sequence_CLICK(context, (CLICK) semanticObject); 
				return; 
			case DomainmodelPackage.COUNT:
				sequence_COUNT_SAVEVAR(context, (COUNT) semanticObject); 
				return; 
			case DomainmodelPackage.FILL:
				sequence_FILL(context, (FILL) semanticObject); 
				return; 
			case DomainmodelPackage.GOTO:
				sequence_GOTO(context, (GOTO) semanticObject); 
				return; 
			case DomainmodelPackage.OPEN:
				sequence_OPEN(context, (OPEN) semanticObject); 
				return; 
			case DomainmodelPackage.PLAY:
				sequence_PLAY(context, (PLAY) semanticObject); 
				return; 
			case DomainmodelPackage.PROCEDURE:
				sequence_PROCEDURE(context, (PROCEDURE) semanticObject); 
				return; 
			case DomainmodelPackage.PROGRAMME:
				sequence_PROGRAMME(context, (PROGRAMME) semanticObject); 
				return; 
			case DomainmodelPackage.READ:
				sequence_READ_SAVEVAR(context, (READ) semanticObject); 
				return; 
			case DomainmodelPackage.SAVEVAR:
				sequence_SAVEVAR(context, (SAVEVAR) semanticObject); 
				return; 
			case DomainmodelPackage.SELECT:
				sequence_SELECT(context, (SELECT) semanticObject); 
				return; 
			case DomainmodelPackage.UNCHECK:
				sequence_UNCHECK(context, (UNCHECK) semanticObject); 
				return; 
			case DomainmodelPackage.VERIFY:
				sequence_VERIFY(context, (VERIFY) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns CHECK
	 *     CHECK returns CHECK
	 *
	 * Constraint:
	 *     name='check'
	 */
	protected void sequence_CHECK(ISerializationContext context, CHECK semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.INSTRUCTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.INSTRUCTION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCHECKAccess().getNameCheckKeyword_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns CLICK
	 *     CLICK returns CLICK
	 *
	 * Constraint:
	 *     (name='click' (type='BUTTON' | type='LINK' | type='IMAGE' | type='TEXT') value=ELEMENTIDENTIFIER)
	 */
	protected void sequence_CLICK(ISerializationContext context, CLICK semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns COUNT
	 *     COUNT returns COUNT
	 *
	 * Constraint:
	 *     (name='count' var=VARTYPE?)
	 */
	protected void sequence_COUNT_SAVEVAR(ISerializationContext context, COUNT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns FILL
	 *     FILL returns FILL
	 *
	 * Constraint:
	 *     (name='fill' (var=VARTYPE | value=STRING))
	 */
	protected void sequence_FILL(ISerializationContext context, FILL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns GOTO
	 *     GOTO returns GOTO
	 *
	 * Constraint:
	 *     (name='go to' value=STRING)
	 */
	protected void sequence_GOTO(ISerializationContext context, GOTO semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.INSTRUCTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.INSTRUCTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.GOTO__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.GOTO__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGOTOAccess().getNameGoToKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGOTOAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns OPEN
	 *     OPEN returns OPEN
	 *
	 * Constraint:
	 *     (name='open' (value='FIREFOX' | value='CHROME'))
	 */
	protected void sequence_OPEN(ISerializationContext context, OPEN semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns PLAY
	 *     PLAY returns PLAY
	 *
	 * Constraint:
	 *     (name='play' params+=STRING*)
	 */
	protected void sequence_PLAY(ISerializationContext context, PLAY semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PROCEDURE returns PROCEDURE
	 *
	 * Constraint:
	 *     (name=VARTYPE (param=VARTYPE params+=VARTYPE*)? inst+=INSTRUCTION*)
	 */
	protected void sequence_PROCEDURE(ISerializationContext context, PROCEDURE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PROGRAMME returns PROGRAMME
	 *
	 * Constraint:
	 *     procedures+=PROCEDURE+
	 */
	protected void sequence_PROGRAMME(ISerializationContext context, PROGRAMME semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns READ
	 *     READ returns READ
	 *
	 * Constraint:
	 *     (name='read' var=VARTYPE?)
	 */
	protected void sequence_READ_SAVEVAR(ISerializationContext context, READ semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SAVEVAR returns SAVEVAR
	 *
	 * Constraint:
	 *     var=VARTYPE
	 */
	protected void sequence_SAVEVAR(ISerializationContext context, SAVEVAR semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.SAVEVAR__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.SAVEVAR__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSAVEVARAccess().getVarVARTYPETerminalRuleCall_3_0(), semanticObject.getVar());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns SELECT
	 *     SELECT returns SELECT
	 *
	 * Constraint:
	 *     (name='select' elem=STRING)
	 */
	protected void sequence_SELECT(ISerializationContext context, SELECT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.INSTRUCTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.INSTRUCTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.SELECT__ELEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.SELECT__ELEM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSELECTAccess().getNameSelectKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSELECTAccess().getElemSTRINGTerminalRuleCall_1_0(), semanticObject.getElem());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns UNCHECK
	 *     UNCHECK returns UNCHECK
	 *
	 * Constraint:
	 *     name='uncheck'
	 */
	protected void sequence_UNCHECK(ISerializationContext context, UNCHECK semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.INSTRUCTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.INSTRUCTION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUNCHECKAccess().getNameUncheckKeyword_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUCTION returns VERIFY
	 *     VERIFY returns VERIFY
	 *
	 * Constraint:
	 *     (name='verify' count=COUNT? (value=STRING | var=VARTYPE | var=VARTYPE | value=STRING)?)
	 */
	protected void sequence_VERIFY(ISerializationContext context, VERIFY semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
