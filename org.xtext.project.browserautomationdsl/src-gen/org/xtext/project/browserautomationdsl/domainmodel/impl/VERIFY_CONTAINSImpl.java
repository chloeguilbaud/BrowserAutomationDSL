/**
 * generated by Xtext 2.15.0
 */
package org.xtext.project.browserautomationdsl.domainmodel.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.project.browserautomationdsl.domainmodel.DomainmodelPackage;
import org.xtext.project.browserautomationdsl.domainmodel.ELEMENTIDENTIFIER;
import org.xtext.project.browserautomationdsl.domainmodel.REGISTERED_VALUE;
import org.xtext.project.browserautomationdsl.domainmodel.VERIFY_CONTAINS;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>VERIFY CONTAINS</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.project.browserautomationdsl.domainmodel.impl.VERIFY_CONTAINSImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.xtext.project.browserautomationdsl.domainmodel.impl.VERIFY_CONTAINSImpl#getIdentifier <em>Identifier</em>}</li>
 *   <li>{@link org.xtext.project.browserautomationdsl.domainmodel.impl.VERIFY_CONTAINSImpl#getContainedIdentifier <em>Contained Identifier</em>}</li>
 *   <li>{@link org.xtext.project.browserautomationdsl.domainmodel.impl.VERIFY_CONTAINSImpl#getVariable <em>Variable</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VERIFY_CONTAINSImpl extends VERIFYImpl implements VERIFY_CONTAINS
{
  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getIdentifier() <em>Identifier</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIdentifier()
   * @generated
   * @ordered
   */
  protected ELEMENTIDENTIFIER identifier;

  /**
   * The cached value of the '{@link #getContainedIdentifier() <em>Contained Identifier</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContainedIdentifier()
   * @generated
   * @ordered
   */
  protected ELEMENTIDENTIFIER containedIdentifier;

  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected REGISTERED_VALUE variable;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VERIFY_CONTAINSImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DomainmodelPackage.Literals.VERIFY_CONTAINS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.VERIFY_CONTAINS__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ELEMENTIDENTIFIER getIdentifier()
  {
    return identifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIdentifier(ELEMENTIDENTIFIER newIdentifier, NotificationChain msgs)
  {
    ELEMENTIDENTIFIER oldIdentifier = identifier;
    identifier = newIdentifier;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DomainmodelPackage.VERIFY_CONTAINS__IDENTIFIER, oldIdentifier, newIdentifier);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIdentifier(ELEMENTIDENTIFIER newIdentifier)
  {
    if (newIdentifier != identifier)
    {
      NotificationChain msgs = null;
      if (identifier != null)
        msgs = ((InternalEObject)identifier).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DomainmodelPackage.VERIFY_CONTAINS__IDENTIFIER, null, msgs);
      if (newIdentifier != null)
        msgs = ((InternalEObject)newIdentifier).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DomainmodelPackage.VERIFY_CONTAINS__IDENTIFIER, null, msgs);
      msgs = basicSetIdentifier(newIdentifier, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.VERIFY_CONTAINS__IDENTIFIER, newIdentifier, newIdentifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ELEMENTIDENTIFIER getContainedIdentifier()
  {
    return containedIdentifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetContainedIdentifier(ELEMENTIDENTIFIER newContainedIdentifier, NotificationChain msgs)
  {
    ELEMENTIDENTIFIER oldContainedIdentifier = containedIdentifier;
    containedIdentifier = newContainedIdentifier;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DomainmodelPackage.VERIFY_CONTAINS__CONTAINED_IDENTIFIER, oldContainedIdentifier, newContainedIdentifier);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setContainedIdentifier(ELEMENTIDENTIFIER newContainedIdentifier)
  {
    if (newContainedIdentifier != containedIdentifier)
    {
      NotificationChain msgs = null;
      if (containedIdentifier != null)
        msgs = ((InternalEObject)containedIdentifier).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DomainmodelPackage.VERIFY_CONTAINS__CONTAINED_IDENTIFIER, null, msgs);
      if (newContainedIdentifier != null)
        msgs = ((InternalEObject)newContainedIdentifier).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DomainmodelPackage.VERIFY_CONTAINS__CONTAINED_IDENTIFIER, null, msgs);
      msgs = basicSetContainedIdentifier(newContainedIdentifier, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.VERIFY_CONTAINS__CONTAINED_IDENTIFIER, newContainedIdentifier, newContainedIdentifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public REGISTERED_VALUE getVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariable(REGISTERED_VALUE newVariable, NotificationChain msgs)
  {
    REGISTERED_VALUE oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DomainmodelPackage.VERIFY_CONTAINS__VARIABLE, oldVariable, newVariable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVariable(REGISTERED_VALUE newVariable)
  {
    if (newVariable != variable)
    {
      NotificationChain msgs = null;
      if (variable != null)
        msgs = ((InternalEObject)variable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DomainmodelPackage.VERIFY_CONTAINS__VARIABLE, null, msgs);
      if (newVariable != null)
        msgs = ((InternalEObject)newVariable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DomainmodelPackage.VERIFY_CONTAINS__VARIABLE, null, msgs);
      msgs = basicSetVariable(newVariable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.VERIFY_CONTAINS__VARIABLE, newVariable, newVariable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DomainmodelPackage.VERIFY_CONTAINS__IDENTIFIER:
        return basicSetIdentifier(null, msgs);
      case DomainmodelPackage.VERIFY_CONTAINS__CONTAINED_IDENTIFIER:
        return basicSetContainedIdentifier(null, msgs);
      case DomainmodelPackage.VERIFY_CONTAINS__VARIABLE:
        return basicSetVariable(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DomainmodelPackage.VERIFY_CONTAINS__TYPE:
        return getType();
      case DomainmodelPackage.VERIFY_CONTAINS__IDENTIFIER:
        return getIdentifier();
      case DomainmodelPackage.VERIFY_CONTAINS__CONTAINED_IDENTIFIER:
        return getContainedIdentifier();
      case DomainmodelPackage.VERIFY_CONTAINS__VARIABLE:
        return getVariable();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DomainmodelPackage.VERIFY_CONTAINS__TYPE:
        setType((String)newValue);
        return;
      case DomainmodelPackage.VERIFY_CONTAINS__IDENTIFIER:
        setIdentifier((ELEMENTIDENTIFIER)newValue);
        return;
      case DomainmodelPackage.VERIFY_CONTAINS__CONTAINED_IDENTIFIER:
        setContainedIdentifier((ELEMENTIDENTIFIER)newValue);
        return;
      case DomainmodelPackage.VERIFY_CONTAINS__VARIABLE:
        setVariable((REGISTERED_VALUE)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DomainmodelPackage.VERIFY_CONTAINS__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case DomainmodelPackage.VERIFY_CONTAINS__IDENTIFIER:
        setIdentifier((ELEMENTIDENTIFIER)null);
        return;
      case DomainmodelPackage.VERIFY_CONTAINS__CONTAINED_IDENTIFIER:
        setContainedIdentifier((ELEMENTIDENTIFIER)null);
        return;
      case DomainmodelPackage.VERIFY_CONTAINS__VARIABLE:
        setVariable((REGISTERED_VALUE)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DomainmodelPackage.VERIFY_CONTAINS__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case DomainmodelPackage.VERIFY_CONTAINS__IDENTIFIER:
        return identifier != null;
      case DomainmodelPackage.VERIFY_CONTAINS__CONTAINED_IDENTIFIER:
        return containedIdentifier != null;
      case DomainmodelPackage.VERIFY_CONTAINS__VARIABLE:
        return variable != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(')');
    return result.toString();
  }

} //VERIFY_CONTAINSImpl
