/**
 * generated by Xtext 2.15.0
 */
package org.xtext.project.browserautomationdsl.domainmodel.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.project.browserautomationdsl.domainmodel.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.project.browserautomationdsl.domainmodel.DomainmodelPackage
 * @generated
 */
public class DomainmodelSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DomainmodelPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DomainmodelSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = DomainmodelPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case DomainmodelPackage.PROGRAMME:
      {
        PROGRAMME programme = (PROGRAMME)theEObject;
        T result = casePROGRAMME(programme);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DomainmodelPackage.INSTRUCTION:
      {
        INSTRUCTION instruction = (INSTRUCTION)theEObject;
        T result = caseINSTRUCTION(instruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DomainmodelPackage.FILL:
      {
        FILL fill = (FILL)theEObject;
        T result = caseFILL(fill);
        if (result == null) result = caseINSTRUCTION(fill);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DomainmodelPackage.SELECT:
      {
        SELECT select = (SELECT)theEObject;
        T result = caseSELECT(select);
        if (result == null) result = caseINSTRUCTION(select);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DomainmodelPackage.READ:
      {
        READ read = (READ)theEObject;
        T result = caseREAD(read);
        if (result == null) result = caseINSTRUCTION(read);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DomainmodelPackage.COUNT:
      {
        COUNT count = (COUNT)theEObject;
        T result = caseCOUNT(count);
        if (result == null) result = caseVERIFY(count);
        if (result == null) result = caseINSTRUCTION(count);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DomainmodelPackage.SAVEVAR:
      {
        SAVEVAR savevar = (SAVEVAR)theEObject;
        T result = caseSAVEVAR(savevar);
        if (result == null) result = caseREAD(savevar);
        if (result == null) result = caseCOUNT(savevar);
        if (result == null) result = caseVERIFY(savevar);
        if (result == null) result = caseINSTRUCTION(savevar);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DomainmodelPackage.VERIFY:
      {
        VERIFY verify = (VERIFY)theEObject;
        T result = caseVERIFY(verify);
        if (result == null) result = caseINSTRUCTION(verify);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DomainmodelPackage.PLAY:
      {
        PLAY play = (PLAY)theEObject;
        T result = casePLAY(play);
        if (result == null) result = caseINSTRUCTION(play);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PROGRAMME</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PROGRAMME</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePROGRAMME(PROGRAMME object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>INSTRUCTION</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>INSTRUCTION</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseINSTRUCTION(INSTRUCTION object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FILL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FILL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFILL(FILL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SELECT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SELECT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSELECT(SELECT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>READ</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>READ</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseREAD(READ object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>COUNT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>COUNT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCOUNT(COUNT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SAVEVAR</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SAVEVAR</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSAVEVAR(SAVEVAR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>VERIFY</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>VERIFY</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVERIFY(VERIFY object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PLAY</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PLAY</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePLAY(PLAY object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //DomainmodelSwitch
