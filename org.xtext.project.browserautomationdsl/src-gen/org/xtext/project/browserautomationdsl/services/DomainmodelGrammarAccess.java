/*
 * generated by Xtext 2.15.0
 */
package org.xtext.project.browserautomationdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DomainmodelGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PROGRAMMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.browserautomationdsl.Domainmodel.PROGRAMME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARTYPETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamVARTYPETerminalRuleCall_2_1_0 = (RuleCall)cParamAssignment_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cParamsVARTYPETerminalRuleCall_2_2_0 = (RuleCall)cParamsAssignment_2_2.eContents().get(0);
		private final Assignment cInstAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstINSTRUCTIONParserRuleCall_3_0 = (RuleCall)cInstAssignment_3.eContents().get(0);
		
		//// IMPORT Procédure
		//PROGRAMME:
		//	('procedure' name=VARTYPE ('with' param=VARTYPE params+=VARTYPE*)?
		//	inst+=INSTRUCTION*)*;
		@Override public ParserRule getRule() { return rule; }
		
		//('procedure' name=VARTYPE ('with' param=VARTYPE params+=VARTYPE*)? inst+=INSTRUCTION*)*
		public Group getGroup() { return cGroup; }
		
		//'procedure'
		public Keyword getProcedureKeyword_0() { return cProcedureKeyword_0; }
		
		//name=VARTYPE
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARTYPE
		public RuleCall getNameVARTYPETerminalRuleCall_1_0() { return cNameVARTYPETerminalRuleCall_1_0; }
		
		//('with' param=VARTYPE params+=VARTYPE*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with'
		public Keyword getWithKeyword_2_0() { return cWithKeyword_2_0; }
		
		//param=VARTYPE
		public Assignment getParamAssignment_2_1() { return cParamAssignment_2_1; }
		
		//VARTYPE
		public RuleCall getParamVARTYPETerminalRuleCall_2_1_0() { return cParamVARTYPETerminalRuleCall_2_1_0; }
		
		//params+=VARTYPE*
		public Assignment getParamsAssignment_2_2() { return cParamsAssignment_2_2; }
		
		//VARTYPE
		public RuleCall getParamsVARTYPETerminalRuleCall_2_2_0() { return cParamsVARTYPETerminalRuleCall_2_2_0; }
		
		//inst+=INSTRUCTION*
		public Assignment getInstAssignment_3() { return cInstAssignment_3; }
		
		//INSTRUCTION
		public RuleCall getInstINSTRUCTIONParserRuleCall_3_0() { return cInstINSTRUCTIONParserRuleCall_3_0; }
	}
	public class INSTRUCTIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.browserautomationdsl.Domainmodel.INSTRUCTION");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cINSTRUCTIONAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cOPENParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cINSTRUCTIONAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cCLICKParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cINSTRUCTIONAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cCHECKParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cINSTRUCTIONAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cUNCHECKParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cREADParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCOUNTParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cVERIFYParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSELECTParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cINSTRUCTIONAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final RuleCall cGOTOParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final RuleCall cFILLParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cPLAYParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//INSTRUCTION:
		//	{INSTRUCTION} OPEN
		//	| {INSTRUCTION} CLICK
		//	| {INSTRUCTION} CHECK
		//	| {INSTRUCTION} UNCHECK
		//	| READ
		//	| COUNT
		//	| VERIFY
		//	| SELECT
		//	| {INSTRUCTION} GOTO
		//	| FILL
		//	| PLAY;
		@Override public ParserRule getRule() { return rule; }
		
		//{INSTRUCTION} OPEN | {INSTRUCTION} CLICK | {INSTRUCTION} CHECK | {INSTRUCTION} UNCHECK | READ | COUNT | VERIFY | SELECT
		//| {INSTRUCTION} GOTO | FILL | PLAY
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{INSTRUCTION} OPEN
		public Group getGroup_0() { return cGroup_0; }
		
		//{INSTRUCTION}
		public Action getINSTRUCTIONAction_0_0() { return cINSTRUCTIONAction_0_0; }
		
		//OPEN
		public RuleCall getOPENParserRuleCall_0_1() { return cOPENParserRuleCall_0_1; }
		
		//{INSTRUCTION} CLICK
		public Group getGroup_1() { return cGroup_1; }
		
		//{INSTRUCTION}
		public Action getINSTRUCTIONAction_1_0() { return cINSTRUCTIONAction_1_0; }
		
		//CLICK
		public RuleCall getCLICKParserRuleCall_1_1() { return cCLICKParserRuleCall_1_1; }
		
		//{INSTRUCTION} CHECK
		public Group getGroup_2() { return cGroup_2; }
		
		//{INSTRUCTION}
		public Action getINSTRUCTIONAction_2_0() { return cINSTRUCTIONAction_2_0; }
		
		//CHECK
		public RuleCall getCHECKParserRuleCall_2_1() { return cCHECKParserRuleCall_2_1; }
		
		//{INSTRUCTION} UNCHECK
		public Group getGroup_3() { return cGroup_3; }
		
		//{INSTRUCTION}
		public Action getINSTRUCTIONAction_3_0() { return cINSTRUCTIONAction_3_0; }
		
		//UNCHECK
		public RuleCall getUNCHECKParserRuleCall_3_1() { return cUNCHECKParserRuleCall_3_1; }
		
		//READ
		public RuleCall getREADParserRuleCall_4() { return cREADParserRuleCall_4; }
		
		//COUNT
		public RuleCall getCOUNTParserRuleCall_5() { return cCOUNTParserRuleCall_5; }
		
		//VERIFY
		public RuleCall getVERIFYParserRuleCall_6() { return cVERIFYParserRuleCall_6; }
		
		//SELECT
		public RuleCall getSELECTParserRuleCall_7() { return cSELECTParserRuleCall_7; }
		
		//{INSTRUCTION} GOTO
		public Group getGroup_8() { return cGroup_8; }
		
		//{INSTRUCTION}
		public Action getINSTRUCTIONAction_8_0() { return cINSTRUCTIONAction_8_0; }
		
		//GOTO
		public RuleCall getGOTOParserRuleCall_8_1() { return cGOTOParserRuleCall_8_1; }
		
		//FILL
		public RuleCall getFILLParserRuleCall_9() { return cFILLParserRuleCall_9; }
		
		//PLAY
		public RuleCall getPLAYParserRuleCall_10() { return cPLAYParserRuleCall_10; }
	}
	public class OPENElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.browserautomationdsl.Domainmodel.OPEN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFIREFOXKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCHROMEKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//OPEN:
		//	'open' ('FIREFOX' | 'CHROME');
		@Override public ParserRule getRule() { return rule; }
		
		//'open' ('FIREFOX' | 'CHROME')
		public Group getGroup() { return cGroup; }
		
		//'open'
		public Keyword getOpenKeyword_0() { return cOpenKeyword_0; }
		
		//'FIREFOX' | 'CHROME'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'FIREFOX'
		public Keyword getFIREFOXKeyword_1_0() { return cFIREFOXKeyword_1_0; }
		
		//'CHROME'
		public Keyword getCHROMEKeyword_1_1() { return cCHROMEKeyword_1_1; }
	}
	public class GOTOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.browserautomationdsl.Domainmodel.GOTO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cGivenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//GOTO:
		//	'go to' 'given'? STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'go to' 'given'? STRING
		public Group getGroup() { return cGroup; }
		
		//'go to'
		public Keyword getGoToKeyword_0() { return cGoToKeyword_0; }
		
		//'given'?
		public Keyword getGivenKeyword_1() { return cGivenKeyword_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}
	public class CLICKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.browserautomationdsl.Domainmodel.CLICK");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cBUTTONKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cLINKKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cIMAGEKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Keyword cTEXTKeyword_2_3 = (Keyword)cAlternatives_2.eContents().get(3);
		private final RuleCall cELEMENTIDENTIFIERParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//CLICK:
		//	'click' 'on' ('BUTTON' | 'LINK' | 'IMAGE' | 'TEXT') ELEMENTIDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//'click' 'on' ('BUTTON' | 'LINK' | 'IMAGE' | 'TEXT') ELEMENTIDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//'click'
		public Keyword getClickKeyword_0() { return cClickKeyword_0; }
		
		//'on'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//'BUTTON' | 'LINK' | 'IMAGE' | 'TEXT'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'BUTTON'
		public Keyword getBUTTONKeyword_2_0() { return cBUTTONKeyword_2_0; }
		
		//'LINK'
		public Keyword getLINKKeyword_2_1() { return cLINKKeyword_2_1; }
		
		//'IMAGE'
		public Keyword getIMAGEKeyword_2_2() { return cIMAGEKeyword_2_2; }
		
		//'TEXT'
		public Keyword getTEXTKeyword_2_3() { return cTEXTKeyword_2_3; }
		
		//ELEMENTIDENTIFIER
		public RuleCall getELEMENTIDENTIFIERParserRuleCall_3() { return cELEMENTIDENTIFIERParserRuleCall_3; }
	}
	public class FILLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.browserautomationdsl.Domainmodel.FILL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFillKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cTEXTFIELDKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cSEARCHFIELDKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cELEMENTIDENTIFIERParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cSavedKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cVarAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cVarVARTYPETerminalRuleCall_4_0_1_0 = (RuleCall)cVarAssignment_4_0_1.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		
		//FILL:
		//	'fill' ('TEXTFIELD' | 'SEARCHFIELD') ELEMENTIDENTIFIER? 'with' ('saved' var=VARTYPE | value=STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//'fill' ('TEXTFIELD' | 'SEARCHFIELD') ELEMENTIDENTIFIER? 'with' ('saved' var=VARTYPE | value=STRING)
		public Group getGroup() { return cGroup; }
		
		//'fill'
		public Keyword getFillKeyword_0() { return cFillKeyword_0; }
		
		//'TEXTFIELD' | 'SEARCHFIELD'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'TEXTFIELD'
		public Keyword getTEXTFIELDKeyword_1_0() { return cTEXTFIELDKeyword_1_0; }
		
		//'SEARCHFIELD'
		public Keyword getSEARCHFIELDKeyword_1_1() { return cSEARCHFIELDKeyword_1_1; }
		
		//ELEMENTIDENTIFIER?
		public RuleCall getELEMENTIDENTIFIERParserRuleCall_2() { return cELEMENTIDENTIFIERParserRuleCall_2; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//'saved' var=VARTYPE | value=STRING
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'saved' var=VARTYPE
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'saved'
		public Keyword getSavedKeyword_4_0_0() { return cSavedKeyword_4_0_0; }
		
		//var=VARTYPE
		public Assignment getVarAssignment_4_0_1() { return cVarAssignment_4_0_1; }
		
		//VARTYPE
		public RuleCall getVarVARTYPETerminalRuleCall_4_0_1_0() { return cVarVARTYPETerminalRuleCall_4_0_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_4_1_0() { return cValueSTRINGTerminalRuleCall_4_1_0; }
	}
	public class CHECKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.browserautomationdsl.Domainmodel.CHECK");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAllKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCHECKBOXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cELEMENTIDENTIFIERParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//CHECK:
		//	'check' 'all'? 'CHECKBOX' ELEMENTIDENTIFIER?;
		@Override public ParserRule getRule() { return rule; }
		
		//'check' 'all'? 'CHECKBOX' ELEMENTIDENTIFIER?
		public Group getGroup() { return cGroup; }
		
		//'check'
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }
		
		//'all'?
		public Keyword getAllKeyword_1() { return cAllKeyword_1; }
		
		//'CHECKBOX'
		public Keyword getCHECKBOXKeyword_2() { return cCHECKBOXKeyword_2; }
		
		//ELEMENTIDENTIFIER?
		public RuleCall getELEMENTIDENTIFIERParserRuleCall_3() { return cELEMENTIDENTIFIERParserRuleCall_3; }
	}
	public class UNCHECKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.browserautomationdsl.Domainmodel.UNCHECK");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUncheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAllKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCHECKBOXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cELEMENTIDENTIFIERParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//UNCHECK:
		//	'uncheck' 'all'? 'CHECKBOX' ELEMENTIDENTIFIER?;
		@Override public ParserRule getRule() { return rule; }
		
		//'uncheck' 'all'? 'CHECKBOX' ELEMENTIDENTIFIER?
		public Group getGroup() { return cGroup; }
		
		//'uncheck'
		public Keyword getUncheckKeyword_0() { return cUncheckKeyword_0; }
		
		//'all'?
		public Keyword getAllKeyword_1() { return cAllKeyword_1; }
		
		//'CHECKBOX'
		public Keyword getCHECKBOXKeyword_2() { return cCHECKBOXKeyword_2; }
		
		//ELEMENTIDENTIFIER?
		public RuleCall getELEMENTIDENTIFIERParserRuleCall_3() { return cELEMENTIDENTIFIERParserRuleCall_3; }
	}
	public class SELECTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.browserautomationdsl.Domainmodel.SELECT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElemSTRINGTerminalRuleCall_1_0 = (RuleCall)cElemAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCOMBOBOXKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cELEMENTIDENTIFIERParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//SELECT:
		//	'select' elem=STRING 'in' 'COMBOBOX' ELEMENTIDENTIFIER?;
		@Override public ParserRule getRule() { return rule; }
		
		//'select' elem=STRING 'in' 'COMBOBOX' ELEMENTIDENTIFIER?
		public Group getGroup() { return cGroup; }
		
		//'select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//elem=STRING
		public Assignment getElemAssignment_1() { return cElemAssignment_1; }
		
		//STRING
		public RuleCall getElemSTRINGTerminalRuleCall_1_0() { return cElemSTRINGTerminalRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//'COMBOBOX'
		public Keyword getCOMBOBOXKeyword_3() { return cCOMBOBOXKeyword_3; }
		
		//ELEMENTIDENTIFIER?
		public RuleCall getELEMENTIDENTIFIERParserRuleCall_4() { return cELEMENTIDENTIFIERParserRuleCall_4; }
	}
	public class READElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.browserautomationdsl.Domainmodel.READ");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cREADAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReadKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cUrlKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cBUTTONKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cLINKKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Keyword cIMAGEKeyword_4_2 = (Keyword)cAlternatives_4.eContents().get(2);
		private final Keyword cTEXTKeyword_4_3 = (Keyword)cAlternatives_4.eContents().get(3);
		private final RuleCall cELEMENTIDENTIFIERParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cSAVEVARParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//READ:
		//	{READ} 'read' 'url' 'from' ('BUTTON' | 'LINK' | 'IMAGE' | 'TEXT') ELEMENTIDENTIFIER SAVEVAR?;
		@Override public ParserRule getRule() { return rule; }
		
		//{READ} 'read' 'url' 'from' ('BUTTON' | 'LINK' | 'IMAGE' | 'TEXT') ELEMENTIDENTIFIER SAVEVAR?
		public Group getGroup() { return cGroup; }
		
		//{READ}
		public Action getREADAction_0() { return cREADAction_0; }
		
		//'read'
		public Keyword getReadKeyword_1() { return cReadKeyword_1; }
		
		//'url'
		public Keyword getUrlKeyword_2() { return cUrlKeyword_2; }
		
		//'from'
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//'BUTTON' | 'LINK' | 'IMAGE' | 'TEXT'
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'BUTTON'
		public Keyword getBUTTONKeyword_4_0() { return cBUTTONKeyword_4_0; }
		
		//'LINK'
		public Keyword getLINKKeyword_4_1() { return cLINKKeyword_4_1; }
		
		//'IMAGE'
		public Keyword getIMAGEKeyword_4_2() { return cIMAGEKeyword_4_2; }
		
		//'TEXT'
		public Keyword getTEXTKeyword_4_3() { return cTEXTKeyword_4_3; }
		
		//ELEMENTIDENTIFIER
		public RuleCall getELEMENTIDENTIFIERParserRuleCall_5() { return cELEMENTIDENTIFIERParserRuleCall_5; }
		
		//SAVEVAR?
		public RuleCall getSAVEVARParserRuleCall_6() { return cSAVEVARParserRuleCall_6; }
	}
	public class ELEMENTIDENTIFIERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.browserautomationdsl.Domainmodel.ELEMENTIDENTIFIER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdentifiedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cLABELKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cCLASSKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cIDKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Keyword cALTKeyword_2_3 = (Keyword)cAlternatives_2.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cGivenKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final RuleCall cVARTYPETerminalRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		
		//ELEMENTIDENTIFIER:
		//	'identified' 'by' ('LABEL' | 'CLASS' | 'ID' | 'ALT') (STRING | 'given' VARTYPE);
		@Override public ParserRule getRule() { return rule; }
		
		//'identified' 'by' ('LABEL' | 'CLASS' | 'ID' | 'ALT') (STRING | 'given' VARTYPE)
		public Group getGroup() { return cGroup; }
		
		//'identified'
		public Keyword getIdentifiedKeyword_0() { return cIdentifiedKeyword_0; }
		
		//'by'
		public Keyword getByKeyword_1() { return cByKeyword_1; }
		
		//'LABEL' | 'CLASS' | 'ID' | 'ALT'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'LABEL'
		public Keyword getLABELKeyword_2_0() { return cLABELKeyword_2_0; }
		
		//'CLASS'
		public Keyword getCLASSKeyword_2_1() { return cCLASSKeyword_2_1; }
		
		//'ID'
		public Keyword getIDKeyword_2_2() { return cIDKeyword_2_2; }
		
		//'ALT'
		public Keyword getALTKeyword_2_3() { return cALTKeyword_2_3; }
		
		//STRING | 'given' VARTYPE
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3_0() { return cSTRINGTerminalRuleCall_3_0; }
		
		//'given' VARTYPE
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'given'
		public Keyword getGivenKeyword_3_1_0() { return cGivenKeyword_3_1_0; }
		
		//VARTYPE
		public RuleCall getVARTYPETerminalRuleCall_3_1_1() { return cVARTYPETerminalRuleCall_3_1_1; }
	}
	public class COUNTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.browserautomationdsl.Domainmodel.COUNT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCOUNTAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCountKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cELEMENTKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cELEMENTIDENTIFIERParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cSAVEVARParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//COUNT:
		//	{COUNT} 'count' 'ELEMENT' ELEMENTIDENTIFIER SAVEVAR?;
		@Override public ParserRule getRule() { return rule; }
		
		//{COUNT} 'count' 'ELEMENT' ELEMENTIDENTIFIER SAVEVAR?
		public Group getGroup() { return cGroup; }
		
		//{COUNT}
		public Action getCOUNTAction_0() { return cCOUNTAction_0; }
		
		//'count'
		public Keyword getCountKeyword_1() { return cCountKeyword_1; }
		
		//'ELEMENT'
		public Keyword getELEMENTKeyword_2() { return cELEMENTKeyword_2; }
		
		//ELEMENTIDENTIFIER
		public RuleCall getELEMENTIDENTIFIERParserRuleCall_3() { return cELEMENTIDENTIFIERParserRuleCall_3; }
		
		//SAVEVAR?
		public RuleCall getSAVEVARParserRuleCall_4() { return cSAVEVARParserRuleCall_4; }
	}
	public class SAVEVARElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.browserautomationdsl.Domainmodel.SAVEVAR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSaveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarVARTYPETerminalRuleCall_3_0 = (RuleCall)cVarAssignment_3.eContents().get(0);
		
		//SAVEVAR:
		//	'and' 'save' 'in' var=VARTYPE;
		@Override public ParserRule getRule() { return rule; }
		
		//'and' 'save' 'in' var=VARTYPE
		public Group getGroup() { return cGroup; }
		
		//'and'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'save'
		public Keyword getSaveKeyword_1() { return cSaveKeyword_1; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//var=VARTYPE
		public Assignment getVarAssignment_3() { return cVarAssignment_3; }
		
		//VARTYPE
		public RuleCall getVarVARTYPETerminalRuleCall_3_0() { return cVarVARTYPETerminalRuleCall_3_0; }
	}
	public class VERIFYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.browserautomationdsl.Domainmodel.VERIFY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cThatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cCOUNTParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Alternatives cAlternatives_2_1_0 = (Alternatives)cGroup_2_1.eContents().get(0);
		private final Keyword cPAGEKeyword_2_1_0_0 = (Keyword)cAlternatives_2_1_0.eContents().get(0);
		private final Keyword cTEXTKeyword_2_1_0_1 = (Keyword)cAlternatives_2_1_0.eContents().get(1);
		private final RuleCall cELEMENTIDENTIFIERParserRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cContainsKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_0_1 = (Alternatives)cGroup_3_0.eContents().get(1);
		private final Group cGroup_3_0_1_0 = (Group)cAlternatives_3_0_1.eContents().get(0);
		private final Alternatives cAlternatives_3_0_1_0_0 = (Alternatives)cGroup_3_0_1_0.eContents().get(0);
		private final Keyword cLINKKeyword_3_0_1_0_0_0 = (Keyword)cAlternatives_3_0_1_0_0.eContents().get(0);
		private final Keyword cIMAGEKeyword_3_0_1_0_0_1 = (Keyword)cAlternatives_3_0_1_0_0.eContents().get(1);
		private final RuleCall cELEMENTIDENTIFIERParserRuleCall_3_0_1_0_1 = (RuleCall)cGroup_3_0_1_0.eContents().get(1);
		private final Assignment cValueAssignment_3_0_1_1 = (Assignment)cAlternatives_3_0_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0_1_1_0 = (RuleCall)cValueAssignment_3_0_1_1.eContents().get(0);
		private final Group cGroup_3_0_1_2 = (Group)cAlternatives_3_0_1.eContents().get(2);
		private final Keyword cSavedKeyword_3_0_1_2_0 = (Keyword)cGroup_3_0_1_2.eContents().get(0);
		private final Assignment cVarAssignment_3_0_1_2_1 = (Assignment)cGroup_3_0_1_2.eContents().get(1);
		private final RuleCall cVarVARTYPETerminalRuleCall_3_0_1_2_1_0 = (RuleCall)cVarAssignment_3_0_1_2_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cEqualsKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cGroup_3_1.eContents().get(1);
		private final Group cGroup_3_1_1_0 = (Group)cAlternatives_3_1_1.eContents().get(0);
		private final Keyword cSavedKeyword_3_1_1_0_0 = (Keyword)cGroup_3_1_1_0.eContents().get(0);
		private final Assignment cVarAssignment_3_1_1_0_1 = (Assignment)cGroup_3_1_1_0.eContents().get(1);
		private final RuleCall cVarVARTYPETerminalRuleCall_3_1_1_0_1_0 = (RuleCall)cVarAssignment_3_1_1_0_1.eContents().get(0);
		private final Assignment cValueAssignment_3_1_1_1 = (Assignment)cAlternatives_3_1_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_1_1_0 = (RuleCall)cValueAssignment_3_1_1_1.eContents().get(0);
		
		//VERIFY:
		//	'verify' 'that' (COUNT | ('PAGE' | 'TEXT') ELEMENTIDENTIFIER?) ('contains' (('LINK' | 'IMAGE') ELEMENTIDENTIFIER |
		//	value=STRING | 'saved' var=VARTYPE) | 'equals' ('saved' var=VARTYPE | value=STRING));
		@Override public ParserRule getRule() { return rule; }
		
		//'verify' 'that' (COUNT | ('PAGE' | 'TEXT') ELEMENTIDENTIFIER?) ('contains' (('LINK' | 'IMAGE') ELEMENTIDENTIFIER |
		//value=STRING | 'saved' var=VARTYPE) | 'equals' ('saved' var=VARTYPE | value=STRING))
		public Group getGroup() { return cGroup; }
		
		//'verify'
		public Keyword getVerifyKeyword_0() { return cVerifyKeyword_0; }
		
		//'that'
		public Keyword getThatKeyword_1() { return cThatKeyword_1; }
		
		//COUNT | ('PAGE' | 'TEXT') ELEMENTIDENTIFIER?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//COUNT
		public RuleCall getCOUNTParserRuleCall_2_0() { return cCOUNTParserRuleCall_2_0; }
		
		//('PAGE' | 'TEXT') ELEMENTIDENTIFIER?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'PAGE' | 'TEXT'
		public Alternatives getAlternatives_2_1_0() { return cAlternatives_2_1_0; }
		
		//'PAGE'
		public Keyword getPAGEKeyword_2_1_0_0() { return cPAGEKeyword_2_1_0_0; }
		
		//'TEXT'
		public Keyword getTEXTKeyword_2_1_0_1() { return cTEXTKeyword_2_1_0_1; }
		
		//ELEMENTIDENTIFIER?
		public RuleCall getELEMENTIDENTIFIERParserRuleCall_2_1_1() { return cELEMENTIDENTIFIERParserRuleCall_2_1_1; }
		
		//'contains' (('LINK' | 'IMAGE') ELEMENTIDENTIFIER | value=STRING | 'saved' var=VARTYPE) | 'equals' ('saved' var=VARTYPE |
		//value=STRING)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'contains' (('LINK' | 'IMAGE') ELEMENTIDENTIFIER | value=STRING | 'saved' var=VARTYPE)
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'contains'
		public Keyword getContainsKeyword_3_0_0() { return cContainsKeyword_3_0_0; }
		
		//('LINK' | 'IMAGE') ELEMENTIDENTIFIER | value=STRING | 'saved' var=VARTYPE
		public Alternatives getAlternatives_3_0_1() { return cAlternatives_3_0_1; }
		
		//('LINK' | 'IMAGE') ELEMENTIDENTIFIER
		public Group getGroup_3_0_1_0() { return cGroup_3_0_1_0; }
		
		//'LINK' | 'IMAGE'
		public Alternatives getAlternatives_3_0_1_0_0() { return cAlternatives_3_0_1_0_0; }
		
		//'LINK'
		public Keyword getLINKKeyword_3_0_1_0_0_0() { return cLINKKeyword_3_0_1_0_0_0; }
		
		//'IMAGE'
		public Keyword getIMAGEKeyword_3_0_1_0_0_1() { return cIMAGEKeyword_3_0_1_0_0_1; }
		
		//ELEMENTIDENTIFIER
		public RuleCall getELEMENTIDENTIFIERParserRuleCall_3_0_1_0_1() { return cELEMENTIDENTIFIERParserRuleCall_3_0_1_0_1; }
		
		//value=STRING
		public Assignment getValueAssignment_3_0_1_1() { return cValueAssignment_3_0_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0_1_1_0() { return cValueSTRINGTerminalRuleCall_3_0_1_1_0; }
		
		//'saved' var=VARTYPE
		public Group getGroup_3_0_1_2() { return cGroup_3_0_1_2; }
		
		//'saved'
		public Keyword getSavedKeyword_3_0_1_2_0() { return cSavedKeyword_3_0_1_2_0; }
		
		//var=VARTYPE
		public Assignment getVarAssignment_3_0_1_2_1() { return cVarAssignment_3_0_1_2_1; }
		
		//VARTYPE
		public RuleCall getVarVARTYPETerminalRuleCall_3_0_1_2_1_0() { return cVarVARTYPETerminalRuleCall_3_0_1_2_1_0; }
		
		//'equals' ('saved' var=VARTYPE | value=STRING)
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'equals'
		public Keyword getEqualsKeyword_3_1_0() { return cEqualsKeyword_3_1_0; }
		
		//'saved' var=VARTYPE | value=STRING
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }
		
		//'saved' var=VARTYPE
		public Group getGroup_3_1_1_0() { return cGroup_3_1_1_0; }
		
		//'saved'
		public Keyword getSavedKeyword_3_1_1_0_0() { return cSavedKeyword_3_1_1_0_0; }
		
		//var=VARTYPE
		public Assignment getVarAssignment_3_1_1_0_1() { return cVarAssignment_3_1_1_0_1; }
		
		//VARTYPE
		public RuleCall getVarVARTYPETerminalRuleCall_3_1_1_0_1_0() { return cVarVARTYPETerminalRuleCall_3_1_1_0_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_3_1_1_1() { return cValueAssignment_3_1_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_1_1_0() { return cValueSTRINGTerminalRuleCall_3_1_1_1_0; }
	}
	public class PLAYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.browserautomationdsl.Domainmodel.PLAY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPLAYAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPlayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cProcedureKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cVARTYPETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamsSTRINGTerminalRuleCall_4_0 = (RuleCall)cParamsAssignment_4.eContents().get(0);
		
		//PLAY:
		//	{PLAY} 'play' 'procedure' VARTYPE params+=STRING*;
		@Override public ParserRule getRule() { return rule; }
		
		//{PLAY} 'play' 'procedure' VARTYPE params+=STRING*
		public Group getGroup() { return cGroup; }
		
		//{PLAY}
		public Action getPLAYAction_0() { return cPLAYAction_0; }
		
		//'play'
		public Keyword getPlayKeyword_1() { return cPlayKeyword_1; }
		
		//'procedure'
		public Keyword getProcedureKeyword_2() { return cProcedureKeyword_2; }
		
		//VARTYPE
		public RuleCall getVARTYPETerminalRuleCall_3() { return cVARTYPETerminalRuleCall_3; }
		
		//params+=STRING*
		public Assignment getParamsAssignment_4() { return cParamsAssignment_4; }
		
		//STRING
		public RuleCall getParamsSTRINGTerminalRuleCall_4_0() { return cParamsSTRINGTerminalRuleCall_4_0; }
	}
	
	
	private final PROGRAMMEElements pPROGRAMME;
	private final INSTRUCTIONElements pINSTRUCTION;
	private final OPENElements pOPEN;
	private final GOTOElements pGOTO;
	private final CLICKElements pCLICK;
	private final FILLElements pFILL;
	private final CHECKElements pCHECK;
	private final UNCHECKElements pUNCHECK;
	private final SELECTElements pSELECT;
	private final READElements pREAD;
	private final ELEMENTIDENTIFIERElements pELEMENTIDENTIFIER;
	private final COUNTElements pCOUNT;
	private final SAVEVARElements pSAVEVAR;
	private final VERIFYElements pVERIFY;
	private final PLAYElements pPLAY;
	private final TerminalRule tVARTYPE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DomainmodelGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPROGRAMME = new PROGRAMMEElements();
		this.pINSTRUCTION = new INSTRUCTIONElements();
		this.pOPEN = new OPENElements();
		this.pGOTO = new GOTOElements();
		this.pCLICK = new CLICKElements();
		this.pFILL = new FILLElements();
		this.pCHECK = new CHECKElements();
		this.pUNCHECK = new UNCHECKElements();
		this.pSELECT = new SELECTElements();
		this.pREAD = new READElements();
		this.pELEMENTIDENTIFIER = new ELEMENTIDENTIFIERElements();
		this.pCOUNT = new COUNTElements();
		this.pSAVEVAR = new SAVEVARElements();
		this.pVERIFY = new VERIFYElements();
		this.pPLAY = new PLAYElements();
		this.tVARTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.browserautomationdsl.Domainmodel.VARTYPE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.project.browserautomationdsl.Domainmodel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// IMPORT Procédure
	//PROGRAMME:
	//	('procedure' name=VARTYPE ('with' param=VARTYPE params+=VARTYPE*)?
	//	inst+=INSTRUCTION*)*;
	public PROGRAMMEElements getPROGRAMMEAccess() {
		return pPROGRAMME;
	}
	
	public ParserRule getPROGRAMMERule() {
		return getPROGRAMMEAccess().getRule();
	}
	
	//INSTRUCTION:
	//	{INSTRUCTION} OPEN
	//	| {INSTRUCTION} CLICK
	//	| {INSTRUCTION} CHECK
	//	| {INSTRUCTION} UNCHECK
	//	| READ
	//	| COUNT
	//	| VERIFY
	//	| SELECT
	//	| {INSTRUCTION} GOTO
	//	| FILL
	//	| PLAY;
	public INSTRUCTIONElements getINSTRUCTIONAccess() {
		return pINSTRUCTION;
	}
	
	public ParserRule getINSTRUCTIONRule() {
		return getINSTRUCTIONAccess().getRule();
	}
	
	//OPEN:
	//	'open' ('FIREFOX' | 'CHROME');
	public OPENElements getOPENAccess() {
		return pOPEN;
	}
	
	public ParserRule getOPENRule() {
		return getOPENAccess().getRule();
	}
	
	//GOTO:
	//	'go to' 'given'? STRING;
	public GOTOElements getGOTOAccess() {
		return pGOTO;
	}
	
	public ParserRule getGOTORule() {
		return getGOTOAccess().getRule();
	}
	
	//CLICK:
	//	'click' 'on' ('BUTTON' | 'LINK' | 'IMAGE' | 'TEXT') ELEMENTIDENTIFIER;
	public CLICKElements getCLICKAccess() {
		return pCLICK;
	}
	
	public ParserRule getCLICKRule() {
		return getCLICKAccess().getRule();
	}
	
	//FILL:
	//	'fill' ('TEXTFIELD' | 'SEARCHFIELD') ELEMENTIDENTIFIER? 'with' ('saved' var=VARTYPE | value=STRING);
	public FILLElements getFILLAccess() {
		return pFILL;
	}
	
	public ParserRule getFILLRule() {
		return getFILLAccess().getRule();
	}
	
	//CHECK:
	//	'check' 'all'? 'CHECKBOX' ELEMENTIDENTIFIER?;
	public CHECKElements getCHECKAccess() {
		return pCHECK;
	}
	
	public ParserRule getCHECKRule() {
		return getCHECKAccess().getRule();
	}
	
	//UNCHECK:
	//	'uncheck' 'all'? 'CHECKBOX' ELEMENTIDENTIFIER?;
	public UNCHECKElements getUNCHECKAccess() {
		return pUNCHECK;
	}
	
	public ParserRule getUNCHECKRule() {
		return getUNCHECKAccess().getRule();
	}
	
	//SELECT:
	//	'select' elem=STRING 'in' 'COMBOBOX' ELEMENTIDENTIFIER?;
	public SELECTElements getSELECTAccess() {
		return pSELECT;
	}
	
	public ParserRule getSELECTRule() {
		return getSELECTAccess().getRule();
	}
	
	//READ:
	//	{READ} 'read' 'url' 'from' ('BUTTON' | 'LINK' | 'IMAGE' | 'TEXT') ELEMENTIDENTIFIER SAVEVAR?;
	public READElements getREADAccess() {
		return pREAD;
	}
	
	public ParserRule getREADRule() {
		return getREADAccess().getRule();
	}
	
	//ELEMENTIDENTIFIER:
	//	'identified' 'by' ('LABEL' | 'CLASS' | 'ID' | 'ALT') (STRING | 'given' VARTYPE);
	public ELEMENTIDENTIFIERElements getELEMENTIDENTIFIERAccess() {
		return pELEMENTIDENTIFIER;
	}
	
	public ParserRule getELEMENTIDENTIFIERRule() {
		return getELEMENTIDENTIFIERAccess().getRule();
	}
	
	//COUNT:
	//	{COUNT} 'count' 'ELEMENT' ELEMENTIDENTIFIER SAVEVAR?;
	public COUNTElements getCOUNTAccess() {
		return pCOUNT;
	}
	
	public ParserRule getCOUNTRule() {
		return getCOUNTAccess().getRule();
	}
	
	//SAVEVAR:
	//	'and' 'save' 'in' var=VARTYPE;
	public SAVEVARElements getSAVEVARAccess() {
		return pSAVEVAR;
	}
	
	public ParserRule getSAVEVARRule() {
		return getSAVEVARAccess().getRule();
	}
	
	//VERIFY:
	//	'verify' 'that' (COUNT | ('PAGE' | 'TEXT') ELEMENTIDENTIFIER?) ('contains' (('LINK' | 'IMAGE') ELEMENTIDENTIFIER |
	//	value=STRING | 'saved' var=VARTYPE) | 'equals' ('saved' var=VARTYPE | value=STRING));
	public VERIFYElements getVERIFYAccess() {
		return pVERIFY;
	}
	
	public ParserRule getVERIFYRule() {
		return getVERIFYAccess().getRule();
	}
	
	//PLAY:
	//	{PLAY} 'play' 'procedure' VARTYPE params+=STRING*;
	public PLAYElements getPLAYAccess() {
		return pPLAY;
	}
	
	public ParserRule getPLAYRule() {
		return getPLAYAccess().getRule();
	}
	
	//terminal VARTYPE:
	//	'A'..'Z' | 'a'..'z' | INT | '_' | '-'*;
	public TerminalRule getVARTYPERule() {
		return tVARTYPE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
